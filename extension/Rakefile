require 'rubygems'
require 'highline/import'

def get_storepass()
	password = %x{cat ../certificates/.password}
	if $?.exitstatus != 0 then
		password = ask("Self signing key password: ") {|q| q.echo = '*'}
	end

	return password
end

############################################################################
# Default
desc 'Ensures the default ActionScript build directory exists'
task :ensure_default_build_directory do
	`mkdir -p build/default`
end

desc 'Builds the default ActionScript fallback version of the extension'
task :compile_default_library => :ensure_default_build_directory do
	`compc +configname=air -load-config+=default/build.config -output build/default/default.swc`
end

desc 'Prepares the default ActionScript fallback version of the extension'
task :prepare_default_library => :compile_default_library do
	# Take the library.swf out of the swc
	`unzip -o build/default/default.swc library.swf -d build/default`
end

############################################################################
# iOS
$build_type = "Release"

desc 'Ensures the ios build directory exists'
task :ensure_ios_build_directory do
	`mkdir -p build/ios`
end

desc 'Builds the release version of the native library for ios'
task :compile_ios_library do
  `xcodebuild -project native/ios/NAH_B2D/NaHBox2D.xcodeproj clean`
  `xcodebuild -project native/ios/NAH_B2D/NaHBox2D.xcodeproj -target NaHBox2D -configuration #{$build_type}`
end

desc 'Builds and copies the version of the native library for ios to the build directory'
task :prepare_ios_library => [:ensure_ios_build_directory, :compile_ios_library, :compile_api] do
	`cp native/ios/NAH_B2D/build/#{$build_type}-iphoneos/libNaHBox2D.a build/ios`

	# Take the library.swf from the main API swc
	`unzip -o build/NaHBox2DAPI.swc library.swf -d build/ios`
end

############################################################################
# Android
desc 'Ensures the android build directory exists'
task :ensure_android_build_directory do
	`mkdir -p build/android`
end

desc 'Builds the release version of the native library for android'
task :compile_android_library do
  `ndk-build -C native/android clean`
  `ndk-build -C native/android`
end

desc 'Builds and copies the version of the native library for ios to the build directory'
task :prepare_android_library => [:ensure_android_build_directory, :compile_android_library, :compile_api] do
	`cp native/android/libs/armeabi/libNaHBox2D.so build/android`

	# Take the library.swf from the main API swc
	`unzip -o build/NaHBox2DAPI.swc library.swf -d build/android`
end

############################################################################
# Extension
desc 'Cleans the build directory by killing it'
task :clean do
	`rm -Rf build`
end

desc 'Ensures the build directory exists'
task :ensure_build_directory do
	`mkdir -p build`
end

desc 'Builds the ActionScript API for the extension'
task :compile_api => :ensure_build_directory do
	`compc +configname=air -load-config+=ane/build.config -output build/NaHBox2DAPI.swc`
end

desc 'Packages the extension'
task :package_extension => [:prepare_ios_library, :prepare_android_library, :prepare_default_library] do
	targets = {
		#"default" => "-C build/default library.swf",
		"iPhone-ARM" => "-C build/ios library.swf libNaHBox2D.a",
		"Android-ARM" => "-C build/android library.swf libNaHBox2D.so"
	}
	command = "adt -package"
	air_signing = "-storetype pkcs12 -keystore ../certificates/certificate.p12 -storepass #{get_storepass}"
	extension_package = "-target ane build/NaHBox2D.ane ane/extension.xml -swc build/NaHBox2DAPI.swc"
	platforms = ''
	targets.map { |plat, options| platforms = platforms + " -platform #{plat} #{options} " }

	%x{#{command} #{air_signing} #{extension_package} #{platforms}}
end

task :default => [ :package_extension ]
